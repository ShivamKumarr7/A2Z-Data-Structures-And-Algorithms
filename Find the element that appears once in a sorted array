// Q) Given a sorted array in which all elements appeas twice and one element appears once find 
//    that element.


// Ex1 
// n = 9
// arr[] = {1,1,2,4,4,5,5,6,6}
// Output --> 2 

// Ex2 
// n = 9
// arr[] = {1,1,2,2,3,3,4,5,5}
// Output --> 4 


// A simple approach is to do this in O(n) time and O(1) space by linearly traversing the array 

// A simple and second approach is to do XOR of all the elements and then find the answer in O(n) time 


// The best way to solve this question is to make use of sorted array and solve it in O(log n) time.
// For this we can use binary search and it will take O(log n) time and O(1) space.


#include<bits/stdc++.h>
using namespace std;
int elementAppearingOnce(int arr[],int n)
{
    int start = 0;
    int end = n-1;
    
    if(n == 1)return arr[0];
    if(arr[0] != arr[1]) return arr[0];
    if(arr[n-1] != arr[n-2]) return arr[n-1];
    
    while(start <= end)
    {
        int mid = (start + end)/2;
        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])
        {
            return arr[mid];
        }
        else if((arr[mid] == arr[mid-1] && (mid % 2 != 0)) || (arr[mid] == arr[mid+1] && (mid % 2 == 0)))
        {
            start = mid + 1;
        }
        else
        {
            end = mid - 1;
        }
    }
}
int main()
{
    int n;
    cin>>n;
    int arr[n] = {0};
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int ans = elementAppearingOnce(arr,n);
    cout<<"The element that appeared only once is : "<<ans<<"\n";
    return 0;
}
