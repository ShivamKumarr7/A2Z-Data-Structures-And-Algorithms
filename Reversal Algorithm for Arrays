// Reversal Algorithm 

// Reversal algorithm to find the state of an array after 'k' rotations 

// Time complexity -->  O(n)
// Space complexity --> O(1)

#include<bits/stdc++.h>
using namespace std;
void printArray(int arr[],int n)
{
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
    cout<<"\n";
}
void reverse(int arr[],int start,int end)
{
    if(start >= end)
    {
        return;
    }
    while(start < end)
    {
        swap(arr[start],arr[end]);
        start += 1;
        end -= 1;
    }
}
void rotateLeftByK(int arr[],int n,int k)
{
    // k ko minimum krdo
    k = k % n;
    if(k == 0)
    {
        return;
    }
    // now use reversal 
    reverse(arr,0,k-1);
    reverse(arr,k,n-1);
    reverse(arr,0,n-1);
}
int main()
{
    int n;
    cin>>n;
    int arr[n] = {0};
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int k;
    cin>>k;
    cout<<"Array before any rotations : ";
    printArray(arr,n);
    rotateLeftByK(arr,n,k);
    cout<<"Array after some rotations : ";
    printArray(arr,n);
    return 0;
}
