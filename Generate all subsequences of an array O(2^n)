// Generate all non empty subsequences of a vector 

// We know for an array of size 'n' there can be 2^n subsequences ..in which 1 will be empty 
// subsequences and others non empty subsequences

// Ex-> 
// n = 3 arr[] = {1,2,3}
// subsequences --> {},{1},{1,2},{1,2,3},{1,3},{2},{2,3},{3}

// Time complexity --> O(2^n)
// Space complexity --> O(2^n)

#include<bits/stdc++.h>
using namespace std;
void helper(vector<int>v,int start,int end,vector<int>temp,vector<vector<int>>&ans)
{
    if(start > end)
    {
        if(temp.size() > 0)
        {
            ans.push_back(temp);
        }
        return;
    }
    helper(v,start+1,end,temp,ans);
    temp.push_back(v[start]);
    helper(v,start+1,end,temp,ans);
}
vector<vector<int>> generateAllSubsequences(vector<int>v)
{
    int start = 0;
    int end = v.size() - 1;
    vector<int>temp;
    vector<vector<int>>ans;
    helper(v,start,end,temp,ans);
    return ans;
}
int main()
{
    int n;
    cin>>n;
    vector<int>v(n,0);
    for(int i=0;i<n;i++)
    {
        cin>>v[i];
    }
    vector<vector<int>>subsequences = generateAllSubsequences(v);
    for(int i=0;i<subsequences.size();i++)
    {
        for(int j=0;j<subsequences[i].size();j++)
        {
            cout<<subsequences[i][j]<<" ";
        }
        cout<<"\n";
    }
    return 0;
}
