// Minimum number of jumps

// Given an array of N integers arr[] where each element represents the maximum length of the jump 
// that can be made forward from that element. This means if arr[i] = x, then we can jump any 
// distance y such that y â‰¤ x.

// Find the minimum number of jumps to reach the end of the array.
// If an element is 0, then you cannot move through that element.


// N = 11 
// arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9} 
// Output -> 3

// N = 6
// arr = {1, 4, 3, 2, 6, 7}
// Output -> 2

#include<bits/stdc++.h>
using namespace std;
int minJumps(int *arr,int n)
{
    if(arr[0] == 0)return -1;
    int jumps_ct = 0;
    int present_idx = 0;
    while(present_idx < n)
    {
        if(present_idx == n-1)
        {
            break;
        }
        else if(present_idx + arr[present_idx] >= (n-1))
        {
            jumps_ct += 1;
            break;
        }
        else if(arr[present_idx] == 0)
        {
            return -1;
        }
        else if(arr[present_idx] == 1)
        {
            present_idx += 1;
            jumps_ct += 1;
        }
        else
        {
            int maxi = -1;
            int value = 0;
            int idx = 0;
            for(int j=present_idx+1;j<=present_idx+arr[present_idx] && j<n;j++)
            {
                int sum = j + arr[j];
                if(sum > maxi)
                {
                    maxi = sum;
                    value = arr[j];
                    idx = j;
                }
            }
            jumps_ct += 1;
            present_idx = idx;
        }
    }
    return jumps_ct;
}
int main()
{
    int n;
    cin>>n;
    int arr[n] = {0};
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int ans = minJumps(arr,n);
    cout<<ans<<"\n";
    return 0;
}


// Time complexity --> O(n) 
// Space complexity --> O(1)
