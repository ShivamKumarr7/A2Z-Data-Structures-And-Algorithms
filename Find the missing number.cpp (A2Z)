// Q) Find the missing number 

// Ex-> n = 5;
// arr[] = {1,2,4,5}
// Answer --> 3 

// Ex-> n = 3 
// arr[] = {1,3}
// Answer --> 2 

// this approach uses bitwise operator xor (^)
// we know xor of similar number is 0 i.e 3 ^ 3 == 0 
// using this property we can xor all array elements and then then all number from 1 to N 
// then xor both of them to get the final result 

// Time Complexity --> O(n)
// Space Complexity --> O(1)

#include<bits/stdc++.h>
using namespace std;
int findMissingNumber(vector<int>v,int n)
{
    int xor_of_array_elements = 0;
    int xor_till_n = 0;
    for(int i=0;i<n-1;i++)
    {
        xor_of_array_elements = xor_of_array_elements ^ v[i];
        xor_till_n = xor_till_n ^ (i+1);
    }
    xor_till_n = xor_till_n ^ n;
    return (xor_till_n ^ xor_of_array_elements);
}
int main()
{
    int n;
    cin>>n;
    vector<int>v(n-1,0);
    for(int i=0;i<n-1;i++)
    {
        cin>>v[i];
    }
    int missing_number = findMissingNumber(v,n);
    cout<<"missing number : "<<missing_number<<"\n";
    return 0;
}
