// ALL SORTING ALGORITHMS 

// i) Selection Sort 
// ii) Bubble Sort 
// iii) Insertion Sort
// iv) Merge Sort 
// v) Quick Sort


#include<bits/stdc++.h>
using namespace std;
void print(vector<int>&v,int n)
{
    for(int i=0;i<n;i++)
    {
        cout<<v[i]<<" ";
    }
    cout<<"\n";
}
void selectionSort(vector<int>&v,int n)
{
    for(int i=0;i<n-1;i++)
    {
        int mini_idx = i;
        for(int j=i+1;j<n;j++)
        {
            if(v[j] < v[mini_idx])
            {
                mini_idx = j;
            }
        }
        swap(v[i],v[mini_idx]);
    }
}
void bubbleSort(vector<int>&v,int n)
{
    // bubble sort is a simple and efficient sorting algorithm which works by repeatedly swapping 
    // the adjacent elements if they are in in-correct order.
    // after each step the maximum element reaches at the end of the array 
    for(int i=0;i<n-1;i++)
    {
        for(int j=0;j<n-i-1;j++)
        {
            if(v[j] > v[j+1])
            {
                swap(v[j],v[j+1]);
            }
        }
    }
}
void insertionSort(vector<int>&v,int n)
{
    // insertion sort is a simple and efficient sorting algorithm in which we take an element and 
    // then place it at its correct position.
    // it is similar to playing cards 
    for(int i=1;i<n;i++)
    {
        int key = v[i];
        int j = i - 1;
        while(j >= 0 && v[j] > key)
        {
            v[j+1] = v[j];
            j -= 1;
        }
        v[j+1] = key;
    }
}
void merge(vector<int>&v,int start,int mid,int end)
{
    vector<int>temp;
    int low = start;
    int high = mid + 1;
    while(low <= mid && high <= end)
    {
        if(v[low] <= v[high])
        {
            temp.push_back(v[low]);
            low += 1;
        }
        else 
        {
            temp.push_back(v[high]);
            high += 1;
        }
    }
    while(low <= mid)
    {
        temp.push_back(v[low]);
        low += 1;
    }
    while(high <= end)
    {
        temp.push_back(v[high]);
        high += 1;
    }
    int idx = 0;
    for(int i=start;i<=end;i++)
    {
        v[i] = temp[idx];
        idx += 1;
    }
}
void mergeSort(vector<int>&v,int start,int end)
{
    if(start < end)
    {
        int mid = (start + end)/2;
        mergeSort(v,start,mid);
        mergeSort(v,mid+1,end);
        merge(v,start,mid,end);
    }
}
void mergeSort(vector<int>&v,int n)
{
    int start = 0;
    int end = n-1;
    mergeSort(v,start,end);
}
int partition(vector<int>&v,int start,int end)
{
    int pivot = v[start];
    int i = start;
    int j = end;
    while(i < j)
    {
        while(v[i] <= pivot && i < end)
        {
            i++;
        }
        while(v[j] > pivot && j > start)
        {
            j--;
        }
        if(i < j)
        {
            swap(v[i],v[j]);
        }
    }
    swap(v[start],v[j]);
    return j;
}
void quickSort(vector<int>&v,int start,int end)
{
    if(start < end)
    {
        int idx = partition(v,start,end);
        quickSort(v,start,idx-1);
        quickSort(v,idx+1,end);
    }
}
void quickSort(vector<int>&v,int n)
{
    int start = 0;
    int end = n-1;
    quickSort(v,start,end);
}
int main()
{
    int n;
    cin>>n;
    vector<int>v(n,0);
    for(int i=0;i<n;i++)
    {
        cin>>v[i];
    }
    // selectionSort(v,n);
    // bubbleSort(v,n);
    // insertionSort(v,n);
    // mergeSort(v,n);
    // quickSort(v,n);
    print(v,n);
    return 0;
}
