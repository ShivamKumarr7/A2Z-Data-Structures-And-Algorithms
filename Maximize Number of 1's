// Maximum Consecutive Ones 

// Given a binary array arr of size N and an integer M. Find the maximum number of consecutive 1's
// produced by flipping at most M 0's.

// Ex1
// n = 11
// arr[] = {1,0,0,1,1,0,1,0,1,1,1}
// m = 2 
// Output --> 8 

// Ex2 
// n = 3 
// arr[] = {1,0,1}
// m = 1 
// Output --> 3 


// Time complexity --> O(n)
// Space complexity --> O(1)


#include<bits/stdc++.h>
using namespace std;
int maxConsecutiveOnes(int arr[],int n,int k)
{
    int start = 0;
    int end = 0;
    int zeros_ct = 0;
    int ans = 0;
    while(end < n)
    {
        if(arr[end] == 0)
        {
            zeros_ct += 1;
        }
        end += 1;
        if(zeros_ct > k)
        {
            if(arr[start] == 0)
            {
                zeros_ct -= 1;
            }
            start += 1;
        }
        ans = max(ans,end-start);
    }
    return ans;
}
int main()
{
    int n;
    cin>>n;
    int arr[n] = {0};
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int k;
    cin>>k;
    int ans = maxConsecutiveOnes(arr,n,k);
    cout<<ans<<"\n";
    return 0;
}
