class Solution {
public:
    void sortColors(vector<int>& nums) {

        int n = nums.size();

        // we can sort this using 3 pointers 

        int low = 0;
        int mid = 0;
        int high = n-1;

        // the intiution behind this is 
        // 0 to low-1 --> all elements are 0
        // low to mid-1 --> all elements are 1 
        // mid to high-1 --> all elements are either (0/1/2) in unsorted fashion 
        // high to n-1 --> all elements are 2 

        // so it will look like this 

        // 0 to low-1  || low to mid-1  || mid to high-1 || high to n-1 
        // 0 0 0 0 0 0    1 1 1 1 1 1 1    2 0 1 2 0 1 1    2 2 2 2 2 2 

        // so we need to sort the area (mid to high-1) 

        while(mid <= high)
        {
            if(nums[mid] == 0)
            {
                swap(nums[low],nums[mid]);
                low += 1;
                mid += 1;
            }
            else if(nums[mid] == 1)
            {
                mid += 1;
            }
            else 
            {
                swap(nums[mid],nums[high]);
                high -= 1;
            }
        } 

    }
};
