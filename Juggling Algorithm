// Juggling Algorithm 

// Juggling Algorithm is used to find value of the array after 'k' rotations of the array

// O(n) time 
// O(1) space 

#include<bits/stdc++.h>
using namespace std;
void printArray(int arr[],int n)
{
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
    cout<<"\n";
}
void rightRotateByD(int arr[],int n,int d)
{
    // step 1 is d ko krdo minimum 
    d = d % n;
    // step 2 is find gcd(d,n);
    int gcd = __gcd(d,n);
    // abb loop start krde 0 to gcd  [0,gcd)
    for(int i=0;i<gcd;i++)
    {
        int temp = arr[i];
        int j = i;
        while(1)
        {
            int k = (j + d) % n;
            if(k == i)
            {
                break;
            }
            arr[j] = arr[k];
            j = k;
        }
        arr[j] = temp;
    }
}
int main()
{
    int n;
    cin>>n;
    int arr[n] = {0};
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    cout<<"Array before any rotations looks like : ";
    printArray(arr,n);
    int d;
    cin>>d;
    rightRotateByD(arr,n,d);
    cout<<"Array after rotations looks like : ";
    printArray(arr,n);
    return 0;
}
