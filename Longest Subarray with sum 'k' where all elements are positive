// Q) Longest Subarray with given sum 'k' ? 

// Given an array and a sum k, we need to print the length of the longest subarray that sums to k.
// ALL the elements will be positive 

// Ex1 
// n = 4
// arr[] = {7,1,6,0}
// k = 7
// Output --> 3   (the subarray {1,6,0} sums up to 7 and it is the longest subarray with length 3)

// Ex2 
// n = 5
// arr[] = {2,3,5,1,9}
// k = 10
// Output --> 3 (the subarray {2,3,5} sums up to 10 and it is the longest subarray with length 3)


// Approach 2 : I can use two pointers and then solve this question in one iteration
// Time complexity --> O(n)
// Space complexity --> O(1)

#include<bits/stdc++.h>
using namespace std;
int longestSubarrayWithSumK(int arr[],int n,int k)
{
    int start = 0;
    int end = 0;
    int ans = 0;
    int sum = 0;
    while(end < n)
    {
        sum += arr[end];
        if(sum == k)
        {
            ans = max(ans,end-start+1);
        }
        else
        {
            if(sum > k)
            {
                sum = sum - arr[start];
                start += 1;
            }
        }
        end += 1;
    }
    return ans;
}
int main()
{
    int n;
    cin>>n;
    int arr[n] = {0};
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int k;
    cin>>k;
    int ans = longestSubarrayWithSumK(arr,n,k);
    cout<<ans<<"\n";
    return 0;
}
