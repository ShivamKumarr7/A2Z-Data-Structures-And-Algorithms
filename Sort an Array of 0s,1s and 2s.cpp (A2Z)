// Q) Sort an array of 0s,1s and 2s 

// Ex-> n = 6 
// v[] = {2,0,2,1,1,0}
// Answer --> {0,0,1,1,2,2} 

// Ex-> n = 3 
// v[] = {2,0,1}
// Answer --> {0,1,2} 


// Method 1 : Sort the array 

// Method 2 : Using 2 pointers 

#include<bits/stdc++.h>
using namespace std;
void printArray(vector<int>v,int n)
{
    for(int i=0;i<n;i++)
    {
        cout<<v[i]<<" ";
    }
    cout<<"\n";
}
void sortArray(vector<int>&v,int n)
{
    // we need to sort this array of 0s,1s and 2s 
    // we will use 3 pointers 
    
    // and the intuition behind this will be 
    int low = 0;
    int mid = 0;
    int high = n-1;
    
    // 0 --> low-1 --> everything will be 0 
    // low --> mid-1 --> everything will be 1 
    // mid --> high-1 ---> everything will be unsorted (0/1/2)
    // high --> n-1 --> everything will be 2 
    
    // so it will look like this 
    
    // 0 to low-1    low to mid-1    mid to high-1    high to n-1 
    // 0 0 0 0 0  || 1 1 1 1 1    || 2 0 1 0 2 1   || 2 2 2 2 2 
    
    while(mid <= high)
    {
        if(v[mid] == 0)
        {
            swap(v[low],v[mid]);
            mid += 1;
            low += 1;
        }
        else if(v[mid] == 1)
        {
            mid += 1;
        }
        else 
        {
            swap(v[mid],v[high]);
            high -= 1;
        }
    }
}
int main()
{
    int n;
    cin>>n;
    vector<int>v(n,0);
    for(int i=0;i<n;i++)
    {
        cin>>v[i];
    }
    printArray(v,n);
    sortArray(v,n);
    printArray(v,n);
    return 0;
}
